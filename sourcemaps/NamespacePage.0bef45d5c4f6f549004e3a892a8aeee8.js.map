{"version":3,"file":"js/NamespacePage.05b11868b6833b686303.js","mappings":"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","sources":["webpack:///./src/Components/Modals/AppModal.js","webpack:///./src/Components/NamespaceTable/NamespaceTableBody.js","webpack:///./src/Containers/NamespaceList.js","webpack:///./src/Components/ReserveButton/ReserveButton.js","webpack:///./src/Routes/NamespacePage/NamespacePage.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { useDispatch } from 'react-redux';\nimport {\n  Modal,\n  ModalVariant,\n  Button,\n  Dropdown,\n  DropdownToggle,\n  DropdownItem,\n} from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const AppModal = ({ isOpen, onClose, namespace }) => {\n  const dispatch = useDispatch();\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [selectedApp, setSelectedApp] = useState('Applications');\n\n  const handleAlert = (variant, title, description) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: title,\n        description: description,\n      })\n    );\n  };\n\n  const dropdownItems = [\n    <DropdownItem\n      key=\"RBAC\"\n      onClick={() => {\n        setSelectedApp('RBAC');\n      }}\n    >\n      RBAC\n    </DropdownItem>,\n    <DropdownItem\n      key=\"Host Inventory\"\n      onClick={() => {\n        setSelectedApp('Host Inventory');\n      }}\n    >\n      Host Inventory\n    </DropdownItem>,\n    <DropdownItem\n      key=\"Engine\"\n      onClick={() => {\n        setSelectedApp('Engine');\n      }}\n    >\n      Engine\n    </DropdownItem>,\n  ];\n\n  return (\n    <React.Fragment>\n      <Modal\n        title=\"Select App\"\n        variant={ModalVariant.small}\n        isOpen={isOpen}\n        onClose={() => {\n          onClose();\n          setSelectedApp('Applications');\n        }}\n        actions={[\n          <Button\n            key=\"confirm\"\n            variant=\"primary\"\n            onClick={() => {\n              onClose();\n              handleAlert(\n                'info',\n                `Now deploying ${selectedApp} to ${namespace}`\n              );\n              setSelectedApp('Applications');\n            }}\n          >\n            Confirm\n          </Button>,\n          <Button\n            key=\"cancel\"\n            variant=\"link\"\n            onClick={() => {\n              onClose();\n              setSelectedApp('Applications');\n            }}\n          >\n            Cancel\n          </Button>,\n        ]}\n      >\n        <div>\n          Use the dropdown menu to select which app you would like to deploy\n          into the selected namespace.\n        </div>\n        <div>\n          <Dropdown\n            onSelect={() => {\n              setIsDropdownOpen(false);\n            }}\n            toggle={\n              <DropdownToggle\n                id=\"toggle-id-menu-body\"\n                onToggle={() => {\n                  setIsDropdownOpen(!isDropdownOpen);\n                }}\n                toggleIndicator={CaretDownIcon}\n              >\n                {selectedApp}\n              </DropdownToggle>\n            }\n            isOpen={isDropdownOpen}\n            dropdownItems={dropdownItems}\n            menuAppendTo=\"parent\"\n          />\n        </div>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nAppModal.propTypes = {\n  isOpen: PropTypes.bool,\n  onClose: PropTypes.func,\n  namespace: PropTypes.string,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { AppModal } from '../Modals/AppModal';\nimport { Tbody, Tr, Td } from '@patternfly/react-table';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst NamespaceTableBody = ({ namespaceData, reloadData }) => {\n  const dispatch = useDispatch();\n  const [modalNamespace, setModalNamespace] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleAlert = (variant, title, description) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: title,\n        description: description,\n      })\n    );\n  };\n\n  const deployAction = (name) => {\n    setModalNamespace(name);\n    setIsModalOpen(true);\n  };\n\n  const extendAction = (name) => {\n    handleAlert('info', `Extending the reservation for namespace ${name}`);\n    fetch(`/namespaces/${name}`, {\n      method: 'PUT',\n    })\n      .then(setTimeout(() => reloadData(), 2000))\n      .catch((error) => console.log(error));\n  };\n\n  const releaseAction = (name) => {\n    handleAlert('info', `Releasing the reservation for namespace ${name}`);\n    fetch(`/namespaces/${name}`, {\n      method: 'DELETE',\n    })\n      .then(setTimeout(() => reloadData(), 3000)) // Figure out better delay\n      .catch((error) => console.log(error));\n  };\n\n  const nsActions = (name) => [\n    {\n      title: 'Deploy Apps',\n      onClick: () => {\n        deployAction(name);\n      },\n    },\n    {\n      title: 'Extend',\n      onClick: () => {\n        extendAction(name);\n      },\n    },\n    {\n      title: 'Release',\n      onClick: () => {\n        releaseAction(name);\n      },\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      {namespaceData && (\n        <Tbody>\n          {namespaceData.map((ns) => (\n            <Tr key={ns.name}>\n              <Td> {ns.name} </Td>\n              <Td> {ns.reserved.toString()} </Td>\n              <Td> {ns.status} </Td>\n              <Td> {ns.apps} </Td>\n              <Td> {ns.requester} </Td>\n              <Td> {ns.expires_in} </Td>\n              <Td\n                // Upgrade to ActionColumn\n                actions={{\n                  items: nsActions(ns.name),\n                  disable: !ns.reserved,\n                }}\n              />\n            </Tr>\n          ))}\n        </Tbody>\n      )}\n      <AppModal\n        isOpen={isModalOpen}\n        onClose={() => {\n          setIsModalOpen(!isModalOpen);\n        }}\n        namespace={modalNamespace}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default NamespaceTableBody;\n\nNamespaceTableBody.propTypes = {\n  namespaceData: PropTypes.array,\n  reloadData: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableComposable, Thead, Tr, Th } from '@patternfly/react-table';\nimport NamespaceTableBody from '../Components/NamespaceTable/NamespaceTableBody';\n\nexport const NamespaceList = ({ namespaces }) => {\n  const [isLoaded, setIsLoaded] = useState(true);\n  const [namespaceData, setNamespaceData] = useState(namespaces);\n\n  const fetchData = () => {\n    console.log('fetching data');\n    fetch(`/namespaces`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setNamespaceData(data.namespaces);\n        setIsLoaded(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const reloadData = () => {\n    setIsLoaded(false);\n    fetchData();\n  };\n\n  const columns = [\n    'Name',\n    'Reserved',\n    'Env Status',\n    'Apps Ready',\n    'Requester',\n    'Expires',\n  ];\n\n  return (\n    <React.Fragment>\n      {isLoaded && namespaceData ? (\n        <TableComposable aria-label=\"Namespace table\">\n          <Thead>\n            <Tr>\n              {columns.map((column) => (\n                <Th key={column}>{column}</Th>\n              ))}\n            </Tr>\n          </Thead>\n          <NamespaceTableBody\n            namespaceData={namespaceData}\n            reloadData={reloadData}\n          />\n        </TableComposable>\n      ) : (\n        <div> Gathering namespaces... </div>\n      )}\n    </React.Fragment>\n  );\n};\n\nNamespaceList.propTypes = {\n  namespaces: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nconst ReserveButton = ({ refresh }) => {\n  const dispatch = useDispatch();\n\n  const handleAlert = (variant, title, description) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: title,\n        description: description,\n      })\n    );\n  };\n\n  const handleReserveButtonClick = () => {\n    handleAlert(\n      'info',\n      'Reserving an ephemeral namespace',\n      'A request to reserve a namespace has been dispatched'\n    );\n\n    fetch(`/namespaces`, {\n      method: 'POST',\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        handleAlert('success', `Reserved namespace ${data.namespace}`);\n        refresh();\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return <Button onClick={() => handleReserveButtonClick()}>Reserve</Button>;\n};\n\nexport default ReserveButton;\n\nReserveButton.propTypes = {\n  refresh: PropTypes.func,\n};\n","import React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { StackItem, Stack, Level, LevelItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\n\nimport './namespace-page.scss';\nimport { NamespaceList } from '../../Containers/NamespaceList';\nimport { ReserveButton } from '../../Components/ReserveButton';\n\nconst NamespacePage = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [namespaceData, setNamespaceData] = useState();\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('namespace-page');\n  }, []);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    console.log('fetching data');\n    fetch(`/namespaces`)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setNamespaceData(data.namespaces);\n        setIsLoaded(true);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const refreshData = () => {\n    console.log('refreshing namespace data');\n    setIsLoaded(false);\n    fetchData();\n  };\n\n  return (\n    <React.Fragment>\n      <PageHeader>\n        <Level>\n          <LevelItem>\n            <PageHeaderTitle title=\"Ephemeral Namespaces\" />\n            <p> This is a proof of concept </p>\n          </LevelItem>\n          <LevelItem>\n            <ReserveButton refresh={refreshData} />\n          </LevelItem>\n        </Level>\n      </PageHeader>\n      <Main>\n        <Stack hasGutter>\n          <StackItem>\n            {isLoaded ? (\n              <NamespaceList namespaces={namespaceData} />\n            ) : (\n              <div> Gathering namespaces... </div>\n            )}\n          </StackItem>\n        </Stack>\n      </Main>\n    </React.Fragment>\n  );\n};\n\nexport default withRouter(NamespacePage);\n"],"names":["AppModal","isOpen","onClose","namespace","dispatch","useDispatch","useState","isDropdownOpen","setIsDropdownOpen","selectedApp","setSelectedApp","dropdownItems","DropdownItem","key","onClick","Modal","title","variant","ModalVariant","actions","Button","addNotification","description","Dropdown","onSelect","toggle","DropdownToggle","id","onToggle","toggleIndicator","CaretDownIcon","menuAppendTo","propTypes","PropTypes","NamespaceTableBody","namespaceData","reloadData","modalNamespace","setModalNamespace","isModalOpen","setIsModalOpen","handleAlert","Tbody","map","ns","Tr","name","Td","reserved","toString","status","apps","requester","expires_in","items","deployAction","fetch","method","then","setTimeout","error","console","log","extendAction","releaseAction","disable","NamespaceList","namespaces","isLoaded","setIsLoaded","setNamespaceData","TableComposable","Thead","column","Th","res","json","data","ReserveButton","refresh","withRouter","useEffect","insights","chrome","appAction","fetchData","PageHeader","Level","LevelItem","PageHeaderTitle","Main","Stack","hasGutter","StackItem"],"sourceRoot":""}